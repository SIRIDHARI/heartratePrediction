import sys #access to system parameters 
https://docs.python.org/3/library/sys.html 
print("Python version: {}". format(sys.version))  
import numpy as np # linear algebra 
print("NumPy version: {}". format(np.__version__)) 
import pandas as pd # data processing, CSV file I/O (e.g. 
pd.read_csv) 
print("pandas version: {}". format(pd.__version__)) 
import matplotlib  
print("matplotlib version: {}". 
format(matplotlib.__version__)) 
import matplotlib.pyplot as plt 
# %matplotlib inline 
import seaborn as sns 
import warnings # ignore warnings 
warnings.filterwarnings('ignore') 
import os 
for dirname, _, filenames in os.walk('/kaggle/input'): 
for filename in filenames: 
print(os.path.join(dirname, filename)) 
df = pd.read_csv('/dataset.csv') 
df.shape 
import matplotlib.pyplot as plt 
plt.rcdefaults() 
fig, ax = plt.subplots() 
y = ('Heart Disease', 'No Disease') 
y_pos = np.arange(len(y)) 
x = (disease, no_disease) 
ax.barh(y_pos, x, align='center') 
ax.set_yticks(y_pos) 
ax.set_yticklabels(y) 
ax.invert_yaxis() # labels read top-to-bottom 
ax.set_xlabel('Count') 
ax.set_title('Target') 
for i, v in enumerate(x): 
ax.text(v + 10, i, str(v), color='black', va='center', 
fontweight='normal') 
plt.show() 
import matplotlib.pyplot as plt 
y = ('Heart Disease', 'No Disease') 
y_pos = np.arange(len(y)) 
x = (disease, no_disease) 
labels = 'Heart Disease', 'No Disease' 
sizes = [disease, no_disease] 
fig1, ax1 = plt.subplots() 
ax1.pie(sizes,  labels=labels, autopct='%1.1f%%', 
startangle=90) 
ax1.axis('equal')  # Equal aspect ratio ensures that pie 
is drawn as a circle. 
plt.title('Percentage of target', size=16) 
plt.show() # Pie chart, where the slices will be ordered 
and plotted counter-clockwise: 
df.isna().sum() # missing values 
ax = sns.distplot(df['thalach']) # histogram distribution 
from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, 
test_size=0.2, random_state=0) 
print('shape of X and y respectively (train) :', 
X_train.shape, y_train.shape) 
print('shape of X and y respectively (test) :', 
X_test.shape, y_test.shape) 
print('RandomForestClassifier') 
from sklearn.ensemble import RandomForestClassifier 
model = RandomForestClassifier(n_estimators=100) # , 
max_depth=5, random_state=1 
model.fit(X_train, y_train) 
Y_pred = model.predict(X_test) 
score = model.score(X_train, y_train) 
print('Training Score:', score) 
score = model.score(X_test, y_test) 
print('Testing Score:', score) 
output = pd.DataFrame({'Predicted':Y_pred}) # Heart
Disease yes or no? 1/0 
print(output.head()) 
people = output.loc[output.Predicted == 1]["Predicted"] 
rate_people = 0 
if len(people) > 0 : 
rate_people = len(people)/len(output) 
print("% of people predicted with heart-disease:", 
rate_people) 
score_rfc = score 
out_rfc = output 
from sklearn.metrics import classification_report 
print(classification_report(y_test,Y_pred)) 
from sklearn.metrics import confusion_matrix 
confusion_matrix = confusion_matrix(y_test,Y_pred) 
class_names = [0,1] 
fig,ax = plt.subplots() 
tick_marks = np.arange(len(class_names)) 
plt.xticks(tick_marks,class_names) 
plt.yticks(tick_marks,class_names) 
sns.heatmap(pd.DataFrame(confusion_matrix), annot = True, 
cmap = 'Greens', fmt = 'g') 
ax.xaxis.set_label_position('top') 
plt.tight_layout() 
plt.title('Confusion matrix for random forest') 
plt.ylabel('Actual label') 
plt.xlabel('Predicted label') 
plt.show() 
# ROC Curve 
from sklearn.metrics import roc_auc_score,roc_curve 
y_probabilities = model.predict_proba(X_test)[:,1] 
false_positive_rate, true_positive_rate, threshold_knn = 
roc_curve(y_test,y_probabilities) 
plt.figure(figsize=(10,6)) 
plt.title('ROC for random forest') 
plt.plot(false_positive_rate, true_positive_rate, 
linewidth=5, color='green') 
plt.plot([0,1],ls='--',linewidth=5) 
plt.plot([0,0],[1,0],c='.5') 
plt.plot([1,1],c='.5') 
plt.text(0.2,0.6,'AUC: 
{:.2f}'.format(roc_auc_score(y_test,y_probabilities)),size
 = 16) 
plt.xlabel('False Positive Rate') 
plt.ylabel('True Positive Rate') 
plt.show() 
from sklearn.ensemble import RandomForestClassifier 
from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, 
test_size=0.2, random_state=0) 
rfc = RandomForestClassifier(n_estimators=100) 
rfc.fit(X_train, y_train) 
y_pred_rfc = rfc.predict(X_test) 
score_rfc = rfc.score(X_test, y_test) 
out_rfc = pd.DataFrame({'Predicted': y_pred_rfc}) 
print("Random Forest Classifier Score:", score_rfc) 
score = score_rfc 
output = out_rfc 
print("Random Forest Classifier Score:", score*100)
